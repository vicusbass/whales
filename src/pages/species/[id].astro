---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import Layout from '../../layouts/Layout.astro';
import whaleData from '../../data/whales.json' assert { type: 'json' };

// Import whale images dynamically using Vite's import.meta.glob
const whaleImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{webp,jpg,png}');

// Define TypeScript interfaces for whale data
interface WhaleSpecies {
  id: string;
  label: string;
  common_name?: string;
  type: string;
  parent?: string;
  description?: string;
  iucn_status?: string;
  size?: string;
  weight?: string;
  author?: string;
}

interface WhaleData {
  nodes: WhaleSpecies[];
  edges: Array<{ source: string; target: string }>;
  summary: Record<string, any>;
}

// Function to find a node by ID in the whales.json data
function findNodeById(id: string): WhaleSpecies | undefined {
  return whaleData.nodes.find(node => node.id === id);
}

// Function to build the taxonomic hierarchy for breadcrumbs
function buildTaxonomicHierarchy(speciesId: string): WhaleSpecies[] {
  const hierarchy: WhaleSpecies[] = [];
  let currentNode = findNodeById(speciesId);
  
  // Add the current species
  if (currentNode) {
    hierarchy.unshift(currentNode);
    
    // Traverse up the parent chain
    while (currentNode?.parent) {
      currentNode = findNodeById(currentNode.parent);
      if (currentNode) {
        hierarchy.unshift(currentNode);
      }
    }
  }
  
  return hierarchy;
}

export async function getStaticPaths() {
  const typedWhaleData = whaleData as WhaleData;
  return typedWhaleData.nodes
    .filter(item => item.type === 'species')
    .map(species => ({
      params: { id: species.id },
      props: { species }
    }));
}

const { species } = Astro.props as { species: WhaleSpecies };

// Get frame color based on IUCN status
const getFrameColor = (status: string | undefined) => {
  if (!status) return 'border-gray-400 shadow-gray-200';
  switch (status.toLowerCase()) {
    case 'critically endangered':
      return 'border-red-600 shadow-red-200';
    case 'endangered':
      return 'border-orange-600 shadow-orange-200';
    case 'vulnerable':
      return 'border-yellow-600 shadow-yellow-200';
    case 'near threatened':
      return 'border-amber-600 shadow-amber-200';
    case 'least concern':
      return 'border-green-600 shadow-green-200';
    case 'data deficient':
      return 'border-gray-600 shadow-gray-200';
    default:
      return 'border-gray-400 shadow-gray-200';
  }
};

const frameColor = getFrameColor(species.iucn_status);
---

<Layout title={`${species.common_name || species.label} | Whale Encyclopedia`} 
       description={`Learn about ${species.common_name || species.label}, ${species.description?.substring(0, 150) || 'a whale species'}`}>
  
  <div class="max-w-7xl mx-auto py-4 sm:py-6 md:py-8 lg:py-12">
    <!-- Breadcrumb Navigation -->
    <nav class="mb-4 sm:mb-6 md:mb-8 text-xs sm:text-sm px-4 sm:px-0">
      <ol class="flex flex-wrap items-center text-gray-600">
        <li><a href="/" class="hover:text-blue-600">Home</a></li>
        
        {/* Build the taxonomic hierarchy breadcrumbs */}
        {(() => {
          const hierarchy = buildTaxonomicHierarchy(species.id);
          return hierarchy.map((node: WhaleSpecies, index: number, array: WhaleSpecies[]) => {
            // Don't include the current species in the breadcrumb links
            const isCurrentSpecies = index === array.length - 1;
            return (
              <li class="before:content-['â€º'] before:mx-1 sm:before:mx-2">
                {isCurrentSpecies ? (
                  <span class="text-gray-900 font-medium truncate max-w-[180px] sm:max-w-none">
                    {node.common_name || node.label}
                  </span>
                ) : (
                  <a href={`/${node.type}/${node.id}`} class="hover:text-blue-600">
                    {node.type === 'suborder' || node.type === 'family' || node.type === 'genus' 
                      ? node.label.split(' ')[0] // Just show the first part of the label (without parentheses)
                      : node.label}
                  </a>
                )}
              </li>
            );
          });
        })()}
      </ol>
    </nav>

    <!-- Main Content -->
    <div class="px-4 sm:px-6 md:px-8">
      <!-- Flex container for desktop layout (side by side) -->
      <div class="flex flex-col md:flex-row md:items-start md:gap-8 lg:gap-12">
        <!-- Mobile: Image first / Desktop: Image on right -->
        <div class="md:order-2 md:w-1/2 lg:w-7/12 xl:w-3/5 mb-8 md:mb-0">
          <!-- Species Image with IUCN Status Frame -->
          <div class={`block w-full max-w-none mx-auto md:mx-0 p-4 sm:p-6 lg:p-8 border-4 rounded-2xl shadow-2xl ${frameColor} bg-white transition-all duration-300 hover:shadow-3xl`}>
            <div class="w-full bg-gray-100 rounded-lg overflow-hidden relative">
              {/* Whale image with dynamic loading and fallback */}
              <div class="w-full">
                {(() => {
                  // Check if we have an image for this whale species
                  const imagePath = `/src/assets/${species.id}.webp`;
                  
                  // Try to find the image in our dynamically imported images
                  if (whaleImages[imagePath]) {
                    return (
                      <Image 
                        src={whaleImages[imagePath]()} 
                        alt={`${species.common_name || species.label}`}
                        width={1000}
                        height={800}
                        class="w-full object-contain max-h-[600px]"
                        loading="eager"
                      />
                    );
                  }
                  
                  // Try alternate extensions if webp not found
                  const jpgPath = `/src/assets/${species.id}.jpg`;
                  if (whaleImages[jpgPath]) {
                    return (
                      <Image 
                        src={whaleImages[jpgPath]()} 
                        alt={`${species.common_name || species.label}`}
                        width={1000}
                        height={800}
                        class="w-full object-contain max-h-[600px]"
                        loading="eager"
                      />
                    );
                  }
                  
                  const pngPath = `/src/assets/${species.id}.png`;
                  if (whaleImages[pngPath]) {
                    return (
                      <Image 
                        src={whaleImages[pngPath]()} 
                        alt={`${species.common_name || species.label}`}
                        width={1000}
                        height={800}
                        class="w-full object-contain max-h-[600px]"
                        loading="eager"
                      />
                    );
                  }
                  
                  // Fallback to placeholder if no image exists
                  return (
                    <div class="text-center text-gray-500 w-full h-full flex flex-col items-center justify-center">
                      <svg class="w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 lg:w-48 lg:h-48 mx-auto mb-2 sm:mb-4 text-gray-400" fill="currentColor" viewBox="0 0 1024 1024">
                        <path d="M944.7 435.7c11.5 13.5 16.4 31.2 13.6 48.6 0 0.2 0 0.4-0.1 0.5-10.8 65.6-41.5 125.2-88.7 172.3-25.2 25.2-54.2 45.7-85.7 61.1-31.5 15.3-65.5 25.4-100.7 29.6-6 12.4-16.4 22.5-29.4 27.9l-169 71.2c-6.1 2.1-12 1-14.2 0.1-4.6-1.9-8.2-5.5-10.1-10-12.7-30.1-13.1-62.3-3.6-91.1-69.4-11.2-133.1-45.2-181.4-97.4-54.5-58.8-84.5-135.4-84.5-215.7V328.5c0-4.3 0.6-8.5 1.6-12.5h-32.6c-52.8 0-95.7-42.9-95.7-95.7v-25.6c0-10.3 8.3-18.6 18.6-18.6h55.8c41 0 78.3 20.9 100.4 53.4 22.1-32.4 59.4-53.4 100.4-53.4h55.8c10.3 0 18.6 8.3 18.6 18.6v25.6c0 52.8-42.9 95.7-95.7 95.7h-29.5c0.3 1.1 0.6 2.2 0.8 3.3 10.4 55 58.7 95 114.9 95h494.2c17.7 0 34.6 7.8 46.2 21.4z"/>
                        <path d="M916.4 459.8c1.6 1.9 2.9 4 3.8 6.2-133.9 23.7-240.8 126.5-268.9 260.7 0 0.2-0.1 0.4-0.1 0.7-1.4 6.3-5.8 11.6-11.8 14.1l-150.2 63.3c-8.5-42.4 13.7-86.5 55.1-104 9.5-4 13.9-14.9 9.9-24.3-4-9.5-14.9-13.9-24.3-9.9-23 9.7-41.8 25.3-55.3 44.3-65.8-7.8-126.5-38.7-171.9-87.6-48.2-51.9-74.7-119.5-74.7-190.4V328.5c0-3.4 1.3-6.5 3.6-8.8 2.4-2.4 5.5-3.7 8.9-3.7 6 0 11.2 4.3 12.3 10.3 13.7 72.6 77.4 125.2 151.4 125.2h494.2c6.9-0.1 13.5 3 18 8.3z" opacity="0.6"/>
                      </svg>
                      <p class="text-base sm:text-lg md:text-xl font-medium">Whale Image</p>
                    </div>
                  );
                })()}
              </div>
            </div>
            
            {/* Image attribution if available - subtle version under the image */}
            {species.author && (
              <div class="mt-2 text-center">
                <p class="text-xs text-gray-500 italic max-w-full overflow-hidden text-ellipsis whitespace-nowrap" title={species.author}>
                  Photo: {species.author}
                </p>
              </div>
            )}
            
            <!-- IUCN Status Badge -->
            {species.iucn_status && (
              <div class={`inline-block mt-4 px-3 py-1 sm:px-4 sm:py-2 rounded-full text-xs sm:text-sm font-bold ${
                species.iucn_status.toLowerCase() === 'critically endangered' ? 'bg-red-100 text-red-800' :
                species.iucn_status.toLowerCase() === 'endangered' ? 'bg-orange-100 text-orange-800' :
                species.iucn_status.toLowerCase() === 'vulnerable' ? 'bg-yellow-100 text-yellow-800' :
                species.iucn_status.toLowerCase() === 'near threatened' ? 'bg-amber-100 text-amber-800' :
                species.iucn_status.toLowerCase() === 'least concern' ? 'bg-green-100 text-green-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {species.iucn_status}
              </div>
            )}
          </div>
        </div>
        
        <!-- Mobile: Info below / Desktop: Info on left -->
        <div class="md:order-1 md:w-1/2 lg:w-5/12 xl:w-2/5 md:pr-4">
          <!-- Species Names -->
          <div class="mb-6 text-center md:text-left">
            <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 mb-2 break-words">
              {species.common_name || 'Unknown Common Name'}
            </h1>
            <p class="text-xl sm:text-2xl text-gray-600 italic break-words">
              {species.label}
            </p>
          </div>
          
          <!-- Description -->
          <div class="bg-blue-50 rounded-lg p-4 sm:p-6 border border-blue-200 mb-6 shadow-md">
            <h2 class="text-xl sm:text-2xl font-bold mb-3 sm:mb-4 text-blue-900 text-center md:text-left">About This Species</h2>
            <p class="text-base sm:text-lg leading-relaxed text-gray-700">
              {species.description || 'No description available for this species.'}
            </p>
            
            <!-- Species Details -->
            {(species.size || species.weight) && (
              <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4 border-t border-blue-200 pt-4">
                {species.size && (
                  <div>
                    <h3 class="text-base sm:text-lg font-semibold text-blue-800">Size</h3>
                    <p class="text-sm sm:text-base text-gray-700">{species.size}</p>
                  </div>
                )}
                {species.weight && (
                  <div>
                    <h3 class="text-base sm:text-lg font-semibold text-blue-800">Weight</h3>
                    <p class="text-sm sm:text-base text-gray-700">{species.weight}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>

    <!-- End of main content -->
  </div>
</Layout>