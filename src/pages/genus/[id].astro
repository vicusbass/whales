---
import Layout from '../../layouts/Layout.astro';
import SpeciesCard from '../../components/SpeciesCard.astro';
import whalesData from '../../data/whales.json';

// Define whale node type
type WhaleNode = {
  id: string;
  label: string;
  type: string;
  parent?: string;
  children?: string[];
  description?: string;
  common_name?: string;
  iucn_status?: string;
  size?: string;
  weight?: string;
  species_count?: number;
  author?: string;
};

export async function getStaticPaths() {
  // Access the nodes array from the whales data inside getStaticPaths
  const whales = whalesData.nodes;
  
  const genera = whales.filter((node: WhaleNode) => node.type === 'genus');
  
  return genera.map((genus: WhaleNode) => {
    return {
      params: { id: genus.id },
      props: { genus, whales } // Pass whales data to the component
    };
  });
}

// Find all species that belong to this genus
function findSpeciesInGenus(genusId: string, whales: WhaleNode[]): WhaleNode[] {
  return whales.filter((node: WhaleNode) => node.type === 'species' && node.parent === genusId);
}

// Build the taxonomic hierarchy for this genus
function buildHierarchy(genusId: string, whales: WhaleNode[]): WhaleNode[] {
  const hierarchy: WhaleNode[] = [];
  
  // Find the complete parent hierarchy of this genus
  function findParents(genusId: string): { family: WhaleNode | null, suborder: WhaleNode | null, order: WhaleNode | null } {
    const genus = whales.find((node: WhaleNode) => node.id === genusId);
    if (!genus || !genus.parent) return { family: null, suborder: null, order: null };
    
    const family = whales.find((node: WhaleNode) => node.id === genus.parent);
    if (!family || !family.parent) return { family, suborder: null, order: null };
    
    const suborder = whales.find((node: WhaleNode) => node.id === family.parent);
    if (!suborder || !suborder.parent) return { family, suborder: suborder || null, order: null };
    
    const order = whales.find((node: WhaleNode) => node.id === suborder.parent);
    
    return { family, suborder: suborder || null, order: order || null };
  }

  const { family, suborder, order } = findParents(genusId);
  
  if (order) {
    hierarchy.push(order);
  }
  if (suborder) {
    hierarchy.push(suborder);
  }
  if (family) {
    hierarchy.push(family);
  }
  
  const currentGenus = whales.find((node: WhaleNode) => node.id === genusId);
  if (currentGenus) {
    hierarchy.push(currentGenus);
  }
  return hierarchy;
}

const { genus, whales } = Astro.props;
const species = findSpeciesInGenus(genus.id, whales);
const taxonomyHierarchy = buildHierarchy(genus.id, whales);
---

<Layout title={`${genus.label} Genus`} description={`Explore all whale species in the ${genus.label} genus`}>
  <nav class="mb-4 sm:mb-6 md:mb-8 text-xs sm:text-sm px-4 sm:px-0">
    <ol class="flex flex-wrap items-center text-gray-600">
      <li><a href="/" class="hover:text-blue-600">Home</a></li>
      
      {taxonomyHierarchy.length > 0 && taxonomyHierarchy.slice(0, -1).map((item: WhaleNode) => (
        <li class="before:content-['›'] before:mx-1 sm:before:mx-2">
          <a href={`/${item.type}/${item.id}`} class="hover:text-blue-600">
            {item.label}
          </a>
        </li>
      ))}
      
      <li class="before:content-['›'] before:mx-1 sm:before:mx-2">
        <span class="text-gray-900 font-medium">{genus.label}</span>
      </li>
    </ol>
  </nav>

  <h1 class="text-3xl md:text-4xl font-bold mb-2">{genus.label}</h1>
  {genus.common_name && <p class="text-xl text-gray-700 mb-6">{genus.common_name}</p>}
  
  {genus.description && <div class="prose max-w-none mb-8">{genus.description}</div>}
  
  <h2 class="text-2xl font-bold mb-4">Species in this Genus</h2>
  
  <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
    {species.map((speciesItem) => (
      <SpeciesCard species={speciesItem} />
    ))}
  </div>
</Layout>
