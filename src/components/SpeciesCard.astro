---
import { Image } from 'astro:assets';

export interface Props {
  species: {
    id: string;
    label: string;
    common_name?: string;
    iucn_status?: string;
  };
}

const { species } = Astro.props;

const images = import.meta.glob<{ default: any }>('/src/assets/*.{jpeg,jpg,png,gif,webp}');

function getImagePath(speciesId: string): (() => Promise<{ default: any }>) | null {
  const extensions = ['webp', 'jpg', 'jpeg', 'png', 'gif'];
  for (const ext of extensions) {
    const path = `/src/assets/${speciesId}.${ext}`;
    if (path in images) {
      return images[path];
    }
  }
  return null;
}

function getStatusColor(status: string | undefined): { bg: string; border: string } {
  if (!status) return { bg: 'bg-gray-300', border: 'border-gray-300' };
  switch (status.toLowerCase()) {
    case 'least concern': return { bg: 'bg-green-500', border: 'border-green-500' };
    case 'near threatened': return { bg: 'bg-yellow-500', border: 'border-yellow-500' };
    case 'vulnerable': return { bg: 'bg-orange-500', border: 'border-orange-500' };
    case 'endangered': return { bg: 'bg-red-500', border: 'border-red-500' };
    case 'critically endangered': return { bg: 'bg-red-700', border: 'border-red-700' };
    case 'extinct in the wild': return { bg: 'bg-purple-700', border: 'border-purple-700' };
    case 'extinct': return { bg: 'bg-black', border: 'border-black' };
    case 'data deficient': return { bg: 'bg-gray-500', border: 'border-gray-500' };
    default: return { bg: 'bg-gray-300', border: 'border-gray-300' };
  }
}

const imagePath = getImagePath(species.id);
const imageModule = imagePath ? await imagePath() : null;
const statusColor = getStatusColor(species.iucn_status);
---

<div class="relative w-full h-full">
  <span class={`absolute top-0 left-0 w-full h-full mt-1 ml-1 ${statusColor.bg} rounded-lg`}></span>
  <a href={`/species/${species.id}`} class={`relative flex flex-col h-full p-3 bg-white border-2 ${statusColor.border} rounded-lg hover:shadow-lg transition-shadow`}>
    <div class="relative w-full h-48 bg-gray-200 rounded mb-3 flex-shrink-0 overflow-hidden">
      {imageModule ? (
        <Image 
          src={imageModule.default} 
          alt={species.common_name || species.label} 
          class="object-contain w-full h-full rounded"
          width={400}
          height={300}
        />
      ) : (
        <div class="flex items-center justify-center h-full bg-gray-100 rounded">
          <span class="text-gray-400 icon-[tabler--photo] w-12 h-12"></span>
        </div>
      )}
    </div>
    
    <div class="flex-grow flex flex-col justify-between">
      <div>
        <h3 class="text-lg font-bold text-gray-800 mb-1 line-clamp-2">{species.common_name || "Unknown"}</h3>
        <p class="text-gray-600 italic text-sm mb-2 line-clamp-1">{species.label}</p>
      </div>
      
      {species.iucn_status && (
        <span class="inline-block px-2 py-1 text-xs rounded bg-gray-100 text-gray-700 mt-auto self-start">
          {species.iucn_status}
        </span>
      )}
    </div>
  </a>
</div>